{"version":3,"sources":["speakerdeck.js"],"names":[],"mappings":"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","file":"speakerdeck.js","sourcesContent":["import { install } from 'source-map-support';install();\nimport request from 'request';\nimport qs from 'qs';\nimport _ from 'lodash';\nimport extract from '../lib/extract-text'\n\nconst baseUrl = 'https://speakerdeck.com/';\nexport default class Speakerdeck {\n  // constructor() {\n  //\n  // }\n  getUser(username, cb) {\n    let url = `${baseUrl}${username}`;\n    let $;\n    let user = {};\n    request.get(url, (err, response, body) => {\n      if (response.statusCode !== 200) {\n        let error = new Error(response.headers.status)\n        return cb(error);\n      }\n      user.display_name = extract.text(body, '.sidebar h2');\n      user.bio = extract.text(body, '.sidebar div.bio p');;\n      user.starts =  extract.number(body, '.sidebar ul.delimited');\n      let talks = extract.elements(body, '.talks .public');\n      user.talks = [];\n      _.forEach(talks, (item) => {\n        let talk = {};\n        talk.title = extract.text(item, 'h3.title a');\n        talk.date = extract.date(item, 'p.date');\n        talk.thumb = extract.attr(item, '.slide_preview img', 'src');\n        talk.link = extract.link(item, '.slide_preview', baseUrl);\n\n        user.talks.push(talk);\n      });\n\n      return cb(null, user);\n    });\n  };\n\n  getUserTalk(opts, cb) {\n    let url = `${baseUrl}${opts.username}/${opts.talk}`;\n    let $;\n    let talk = {};\n    request.get(url, (err, response, body) => {\n      if (response.statusCode !== 200) {\n        let error = new Error(response.headers.status)\n        return cb(error);\n      }\n      talk.title = extract.text(body, '#talk-details header h1');\n      talk.date = extract.date(body, '#talk-details header p mark', true);\n      talk.category = extract.text(body, '#talk-details header p mark', 'last');\n      talk.description = extract.text(body, '.description p');\n      talk.stars = extract.number(body, '.stargazers');\n      talk.views = extract.split(body, '.views span', 0);\n      talk.link = url;\n      return cb(null, talk)\n    });\n  }\n\n  getUserStars(username, cb) {\n    let url = `${baseUrl}${username}/stars`;\n    let $;\n    let stars = [];\n    request.get(url, (err, response, body) => {\n      let talks = extract.elements(body, '.talks .public');\n      _.forEach(talks, (item) => {\n        let talk = {};\n        talk.title = extract.text(item, 'h3.title a');\n        talk.date = extract.date(item, 'p.date');\n        talk.thumb = extract.attr(item, '.slide_preview img', 'src');\n        talk.link = extract.link(item, '.slide_preview', baseUrl);\n        talk.author = extract.text(item, 'p.date a');\n        stars.push(talk);\n      });\n      return cb(null, stars);\n    });\n  }\n\n  getCategories(cb) {\n    let $;\n    let categories = [];\n    request.get(baseUrl, (err, response, body) => {\n      if (response.statusCode !== 200) {\n        let error = new Error(response.headers.status)\n        return cb(error);\n      }\n      let elements = extract.elements(body, '.sidebar ul li');\n      _.forEach(elements, (element) => {\n        let category = {};\n        category.name = extract.text(element, 'a');\n        category.link = extract.link(element, 'a', baseUrl);\n\n        categories.push(category);\n      });\n\n      return cb(null, categories)\n    });\n  }\n\n  search(opts, cb){\n    let querystring = qs.stringify(opts);\n    let url = `${baseUrl}search?${querystring}`;\n    let $;\n    let results = [];\n    let pages = 0;\n    request.get(url, (err, response, body) => {\n      if (response.statusCode !== 200) {\n        let error = new Error(response.headers.status)\n        return cb(error);\n      }\n      let elements = extract.elements(body, '.talks .talk');\n      pages = extract.page(body, '.page');\n      _.forEach(elements, (el, i) => {\n        let result = {};\n        result.title = extract.text(el, 'h3.title a');\n\n        results.push(result)\n      });\n\n      return cb(null, {results, pages: pages});\n    });\n  }\n}\n"],"sourceRoot":"/Users/paulopires/Workspace/Github/paulohp/speakerdeck/src"}